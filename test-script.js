const http = require('http');

const BASE_URL = 'http://localhost:3000';

// Funci√≥n para hacer peticiones HTTP
function makeRequest(path) {
  return new Promise((resolve, reject) => {
    const req = http.get(`${BASE_URL}${path}`, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve(result);
        } catch (e) {
          resolve(data);
        }
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    req.setTimeout(30000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });
  });
}

// Funci√≥n para simular m√∫ltiples peticiones
async function testBlocking() {
  console.log('üß™ Iniciando prueba de bloqueo...\n');
  
  try {
    // 1. Verificar que el servidor funciona
    console.log('1Ô∏è‚É£ Verificando estado del servidor...');
    const status1 = await makeRequest('/status');
    console.log('‚úÖ Servidor respondi√≥:', status1.message);
    
    // 2. Iniciar operaci√≥n bloqueante
    console.log('\n2Ô∏è‚É£ Iniciando operaci√≥n bloqueante...');
    const blockingPromise = makeRequest('/blocking?iterations=20000000');
    
    // 3. Intentar hacer otra petici√≥n mientras est√° bloqueado
    console.log('3Ô∏è‚É£ Intentando acceder al status mientras est√° bloqueado...');
    
    setTimeout(async () => {
      try {
        const status2 = await makeRequest('/status');
        console.log('‚úÖ Status respondi√≥ durante bloqueo:', status2.message);
      } catch (error) {
        console.log('‚ùå Status NO respondi√≥ durante bloqueo:', error.message);
      }
    }, 1000);
    
    // 4. Esperar a que termine la operaci√≥n bloqueante
    const blockingResult = await blockingPromise;
    console.log('‚úÖ Operaci√≥n bloqueante completada:', blockingResult.duration);
    
    // 5. Verificar que el servidor vuelve a responder
    console.log('\n4Ô∏è‚É£ Verificando que el servidor vuelve a responder...');
    const status3 = await makeRequest('/status');
    console.log('‚úÖ Servidor responde nuevamente:', status3.message);
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
  }
}

// Ejecutar la prueba
testBlocking();
